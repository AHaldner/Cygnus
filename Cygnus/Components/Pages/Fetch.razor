@page "/fetch"
@attribute [StreamRendering]
@using MySql.Data.MySqlClient
@using System.Data
@using DotNetEnv


<PageTitle>Fetch</PageTitle>

<h1>Current Cronjobs</h1>

@if (data == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ul>
    @foreach (var item in data)
        {
            <li>@item</li>
        }
    </ul>
}

@code {
    private List<string>? data;

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    private async Task FetchData()
    {
        DotNetEnv.Env.Load();

        var server = Environment.GetEnvironmentVariable("DB_SERVER");
        var user = Environment.GetEnvironmentVariable("DB_USER");
        var database = Environment.GetEnvironmentVariable("DB_NAME");
        var port = Environment.GetEnvironmentVariable("DB_PORT");
        var password = Environment.GetEnvironmentVariable("DB_PASSWORD");

        var connectionString =
        $"server={server};user={user};database={database};port={port};password={password}";
        using var connection = new MySqlConnection(connectionString);
        await connection.OpenAsync();

        using var command = new MySqlCommand("SELECT * FROM updates", connection);
        using var reader = await command.ExecuteReaderAsync();

        data = new List<string>();
        while (await reader.ReadAsync())
        {
            data.Add(reader.GetString(3));
        }
    }
}
